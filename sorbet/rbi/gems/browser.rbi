# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/browser/all/browser.rbi
#
# browser-3.0.3

module Browser
  def self.matchers; end
  def self.modern_rules; end
  def self.new(user_agent, **kwargs); end
  def self.root; end
end
module Browser::DetectVersion
  def detect_version?(actual_version, expected_version); end
  def parse_version(version); end
end
class Browser::AcceptLanguage
  def code; end
  def full; end
  def initialize(part); end
  def name; end
  def part; end
  def quality; end
  def quality_value; end
  def region; end
  def self.languages; end
  def self.parse(accept_language); end
end
class Browser::Base
  def accept_language; end
  def alipay?(expected_version = nil); end
  def bot; end
  def bot?; end
  def chrome?(expected_version = nil); end
  def compatibility_view?; end
  def core_media?(expected_version = nil); end
  def device; end
  def edge?(expected_version = nil); end
  def electron?(expected_version = nil); end
  def facebook?(expected_version = nil); end
  def firefox?(expected_version = nil); end
  def ie?(expected_version = nil); end
  def initialize(ua, accept_language: nil); end
  def instagram?(expected_version = nil); end
  def known?; end
  def meta; end
  def micro_messenger?(expected_version = nil); end
  def modern?; end
  def msie_full_version; end
  def msie_version; end
  def nokia?(expected_version = nil); end
  def opera?(expected_version = nil); end
  def opera_mini?(expected_version = nil); end
  def otter?(expected_version = nil); end
  def phantom_js?(expected_version = nil); end
  def platform; end
  def proxy?; end
  def quicktime?(expected_version = nil); end
  def safari?(expected_version = nil); end
  def safari_webapp_mode?; end
  def snapchat?(expected_version = nil); end
  def sputnik?(expected_version = nil); end
  def to_a; end
  def to_s; end
  def ua; end
  def uc_browser?(expected_version = nil); end
  def version; end
  def webkit?(expected_version = nil); end
  def webkit_full_version; end
  def wechat?(expected_version = nil); end
  def weibo?(expected_version = nil); end
  def yandex?(expected_version = nil); end
  def yandex_browser?(expected_version = nil); end
  include Browser::DetectVersion
end
class Browser::Safari < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Chrome < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::InternetExplorer < Browser::Base
  def compatibility_view?; end
  def full_version; end
  def id; end
  def ie_version; end
  def match?; end
  def modern_ie?; end
  def msie?; end
  def msie_full_version; end
  def msie_version; end
  def name; end
  def trident_version; end
end
class Browser::Firefox < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Edge < Browser::InternetExplorer
  def chrome_based?; end
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Opera < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::BlackBerry < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Generic < Browser::Base
  def full_version; end
  def id; end
  def infer_name; end
  def match?; end
  def name; end
end
class Browser::PhantomJS < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::UCBrowser < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Nokia < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::MicroMessenger < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Weibo < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::QQ < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Alipay < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Electron < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Facebook < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Otter < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Instagram < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Yandex < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Sputnik < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Snapchat < Browser::Base
  def full_version; end
  def id; end
  def match?; end
  def name; end
end
class Browser::Bot
  def bot?; end
  def bot_exception?; end
  def browser; end
  def detect_bot?; end
  def initialize(ua); end
  def name; end
  def search_engine?; end
  def self.bot_exceptions; end
  def self.bots; end
  def self.default_matchers; end
  def self.load_yaml(path); end
  def self.matchers; end
  def self.search_engines; end
  def self.why?(ua); end
  def ua; end
  def why?; end
end
class Browser::Bot::EmptyUserAgentMatcher
  def self.call(ua, _browser); end
end
class Browser::Bot::KeywordMatcher
  def self.call(ua, _browser); end
end
class Browser::Bot::KnownBotsMatcher
  def self.call(ua, _browser); end
end
class Browser::Middleware
  def assets?(request); end
  def call(env); end
  def html?(request); end
  def initialize(app, &block); end
  def process?(request); end
  def redirect(path); end
  def resolve_redirection(env, current_path, path); end
  def run_app(env); end
end
class Browser::Middleware::Context
  def browser; end
  def initialize(request); end
  def redirect_to(path); end
  def request; end
end
class Browser::Platform
  def ==(other); end
  def adobe_air?(expected_version = nil); end
  def android?(expected_version = nil); end
  def android_app?; end
  def android_webview?; end
  def blackberry?(expected_version = nil); end
  def chrome_os?(expected_version = nil); end
  def firefox_os?; end
  def id; end
  def initialize(ua); end
  def ios?(expected_version = nil); end
  def ios_app?; end
  def ios_webview?; end
  def linux?; end
  def mac?(expected_version = nil); end
  def name; end
  def other?; end
  def self.matchers; end
  def subject; end
  def to_s; end
  def ua; end
  def version; end
  def windows10?; end
  def windows7?; end
  def windows8?; end
  def windows8_1?; end
  def windows?(expected_version = nil); end
  def windows_mobile?(expected_version = nil); end
  def windows_phone?(expected_version = nil); end
  def windows_rt?; end
  def windows_touchscreen_desktop?; end
  def windows_vista?; end
  def windows_wow64?; end
  def windows_x64?; end
  def windows_x64_inclusive?; end
  def windows_xp?; end
  include Browser::DetectVersion
end
class Browser::Platform::Base
  def initialize(ua); end
  def match?; end
  def ua; end
end
class Browser::Platform::IOS < Browser::Platform::Base
  def device; end
  def id; end
  def match?; end
  def name; end
  def version; end
end
class Browser::Platform::Linux < Browser::Platform::Base
  def id; end
  def match?; end
  def name; end
  def version; end
end
class Browser::Platform::Windows < Browser::Platform::Base
  def id; end
  def match?; end
  def name; end
  def version; end
end
class Browser::Platform::Mac < Browser::Platform::Base
  def id; end
  def match?; end
  def name; end
  def version; end
end
class Browser::Platform::WindowsPhone < Browser::Platform::Base
  def id; end
  def match?; end
  def name; end
  def version; end
end
class Browser::Platform::WindowsMobile < Browser::Platform::Base
  def id; end
  def match?; end
  def name; end
  def version; end
end
class Browser::Platform::FirefoxOS < Browser::Platform::Base
  def id; end
  def match?; end
  def name; end
  def version; end
end
class Browser::Platform::BlackBerry < Browser::Platform::Base
  def id; end
  def match?; end
  def name; end
  def version; end
end
class Browser::Platform::Android < Browser::Platform::Base
  def id; end
  def match?; end
  def name; end
  def version; end
end
class Browser::Platform::Other < Browser::Platform::Base
  def id; end
  def match?; end
  def name; end
  def version; end
end
class Browser::Platform::ChromeOS < Browser::Platform::Base
  def id; end
  def match?; end
  def name; end
  def version; end
end
class Browser::Platform::AdobeAir < Browser::Platform::Base
  def id; end
  def match?; end
  def name; end
  def version; end
end
class Browser::Device
  def blackberry_playbook?; end
  def console?; end
  def detect_mobile?; end
  def id; end
  def initialize(ua); end
  def ipad?; end
  def iphone?; end
  def ipod?; end
  def ipod_touch?; end
  def kindle?; end
  def kindle_fire?; end
  def mobile?; end
  def name; end
  def nintendo?; end
  def nintendo_switch?; end
  def nintendo_wii?; end
  def nintendo_wiiu?; end
  def platform; end
  def playbook?; end
  def playstation3?; end
  def playstation4?; end
  def playstation?; end
  def playstation_vita?; end
  def ps3?; end
  def ps4?; end
  def psp?; end
  def psp_vita?; end
  def self.matchers; end
  def silk?; end
  def subject; end
  def surface?; end
  def switch?; end
  def tablet?; end
  def tv?; end
  def ua; end
  def unknown?; end
  def vita?; end
  def wii?; end
  def wiiu?; end
  def xbox?; end
  def xbox_360?; end
  def xbox_one?; end
end
class Browser::Device::Base
  def initialize(ua); end
  def ua; end
end
class Browser::Device::Android < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::Unknown < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::Ipad < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::IpodTouch < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::Iphone < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::PlayStation3 < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::PlayStation4 < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::PSP < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::PSVita < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::Kindle < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::KindleFire < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::Wii < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::WiiU < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::BlackBerryPlaybook < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::Surface < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
  def platform; end
end
class Browser::Device::Switch < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::TV < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::XboxOne < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
class Browser::Device::Xbox360 < Browser::Device::Base
  def id; end
  def match?; end
  def name; end
end
module Browser::Meta
  def self.get(browser); end
  def self.rules; end
end
class Browser::Meta::Base
  def browser; end
  def initialize(browser); end
  def meta; end
  def to_a; end
end
class Browser::Meta::GenericBrowser < Browser::Meta::Base
  def generic?; end
  def meta; end
end
class Browser::Meta::Id < Browser::Meta::Base
  def meta; end
end
class Browser::Meta::IE < Browser::Meta::Base
  def meta; end
  def version; end
end
class Browser::Meta::IOS < Browser::Meta::Base
  def meta; end
end
class Browser::Meta::Mobile < Browser::Meta::Base
  def meta; end
end
class Browser::Meta::Modern < Browser::Meta::Base
  def meta; end
end
class Browser::Meta::Platform < Browser::Meta::Base
  def meta; end
end
class Browser::Meta::Proxy < Browser::Meta::Base
  def meta; end
end
class Browser::Meta::Safari < Browser::Meta::Base
  def meta; end
end
class Browser::Meta::Webkit < Browser::Meta::Base
  def meta; end
end
class Browser::Meta::Tablet < Browser::Meta::Base
  def meta; end
end
class Browser::Meta::Device < Browser::Meta::Base
  def meta; end
end
module Browser::ActionController
  def browser; end
  extend ActiveSupport::Concern
end
module Browser::Middleware::Context::UrlMethods
  def default_url_options; end
end
module Browser::Middleware::Context::Additions
  extend ActiveSupport::Concern
end
class Browser::Railtie < Rails::Railtie
end
